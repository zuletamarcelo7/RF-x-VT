import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
#import numpy as np
import warnings

# Load your data
excel_file = 'export-mini_7170.xlsx'  # Update with your Excel file name
df = pd.read_excel(excel_file, sheet_name='export-mini_7170', engine='openpyxl', index_col=0)

# Suppress specific UserWarning
warnings.filterwarnings("ignore", message="Skipping features without any observed values", category=UserWarning)

# Create an empty DataFrame to store MSE results
mse_results = pd.DataFrame(index=df.index, columns=['MSE'])

# Iterate through each row as the target variable
for index, row in df.iterrows():
    y = row.values  # Use the row as the target variable

    # Check for NaN values in target variable
    if any(pd.isnull(y)):
        # Impute missing values in the target variable
        imputer_y = SimpleImputer(strategy='mean')
        y_imputed = imputer_y.fit_transform(y.reshape(-1, 1))
        y = y_imputed.flatten()

    # Extract features (X) and handle missing values
    X = df.iloc[:, :] 
    imputer_X = SimpleImputer(strategy='mean')
    X_imputed = imputer_X.fit_transform(X)

    # Standardize the features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X_imputed)

    # Create a Ridge regressor with reduced alpha values
    alpha_values = [0.1, 0.5]  # Reduced alpha values
    for alpha in alpha_values:
        ridge_reg = Ridge(alpha=alpha)

        # Evaluate the model using cross-validation
        try:
            scores = cross_val_score(ridge_reg, X_scaled, y, cv=3, scoring='neg_mean_squared_error', error_score='raise')
        except Exception as e:
            # Skip this alpha value and move to the next if an error occurs
            continue

        # Calculate the mean squared error
        mse = -scores.mean()

        # Store MSE results in the DataFrame if it's under 30
        if mse < 30:
            mse_results.loc[index, 'MSE'] = mse

# Rank the MSE values from best to worst
ranked_mse = mse_results.sort_values(by='MSE')

# Print the ranked MSE values
print("Ranked MSE values (Lowest to Highest):")
print(ranked_mse)
